services:
  db:
    image: postgres:16
    container_name: ${APP_SLUG}_db_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    ports:
      # Accès local optionnel à la DB depuis l’hôte (Traefik ne touche pas à la DB)
      - "${PROD_DB_BIND:-127.0.0.1}:${PROD_DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 40
    restart: unless-stopped
    # pas besoin de networks: la db ira sur "default" (qui est appnet nommé)

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${APP_SLUG}_backend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles   # cible collectstatic
    # Bind local (debug uniquement, non exposé publiquement)
    ports:
      - "${PROD_API_BIND:-127.0.0.1}:${PROD_API_PORT:-8000}:8000"
    command:
      - bash
      - -lc
      - |
          python manage.py migrate --noinput &&
          python manage.py collectstatic --noinput &&
          gunicorn calendar_project.wsgi:application \
            --bind 0.0.0.0:8000 \
            --workers 3 \
            --access-logfile - \
            --error-logfile -
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks:
      - default   # = appnet nommé
      - edge

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=edge"

      # API (HTTPS)
      - "traefik.http.routers.cal-api-secure.rule=Host(`${APP_HOST}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.cal-api-secure.entrypoints=websecure"
      - "traefik.http.routers.cal-api-secure.tls=true"
      - "traefik.http.routers.cal-api-secure.tls.certresolver=le"
      - "traefik.http.routers.cal-api-secure.priority=20"
      - "traefik.http.services.cal-api.loadbalancer.server.port=8000"

      # Admin Django (HTTPS)
      - "traefik.http.routers.cal-admin-secure.rule=Host(`${APP_HOST}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.cal-admin-secure.entrypoints=websecure"
      - "traefik.http.routers.cal-admin-secure.tls=true"
      - "traefik.http.routers.cal-admin-secure.tls.certresolver=le"
      - "traefik.http.routers.cal-admin-secure.priority=20"
      - "traefik.http.services.cal-admin.loadbalancer.server.port=8000"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE:-/api}
        VITE_ADMIN_URL: ${VITE_ADMIN_URL}
        APP_NAME: ${APP_NAME}
    container_name: ${APP_SLUG}_frontend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      backend:
        condition: service_healthy
    # ⚠️ pas d'exposition de port: Traefik est le frontal unique
    ports: []
    volumes:
      - django_static:/static:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks:
      - default   # = appnet nommé
      - edge

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=edge"

      # HTTP -> HTTPS
      - "traefik.http.routers.cal-web.rule=Host(`${APP_HOST}`)"
      - "traefik.http.routers.cal-web.entrypoints=web"
      - "traefik.http.routers.cal-web.middlewares=cal-redirect-https"
      - "traefik.http.middlewares.cal-redirect-https.redirectscheme.scheme=https"

      # Site (HTTPS)
      - "traefik.http.routers.cal-websecure.rule=Host(`${APP_HOST}`)"
      - "traefik.http.routers.cal-websecure.entrypoints=websecure"
      - "traefik.http.routers.cal-websecure.tls=true"
      - "traefik.http.routers.cal-websecure.tls.certresolver=le"
      - "traefik.http.routers.cal-websecure.priority=10"
      - "traefik.http.services.cal-frontend.loadbalancer.server.port=80"

volumes:
  pgdata:
    name: ${APP_SLUG}_${APP_ENV}_pgdata
  django_static:
    name: ${APP_SLUG}_${APP_ENV}_static

networks:
  # Le réseau par défaut du stack **est** l'appnet nommé → tout le monde s'y retrouve (db/backend/frontend)
  default:
    name: ${APP_SLUG}_${APP_ENV}_appnet
  edge:
    external: true
    name: edge
