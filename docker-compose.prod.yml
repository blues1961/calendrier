services:
  db:
    image: postgres:16
    container_name: ${APP_SLUG}_db_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    ports:
      - "${PROD_DB_BIND:-127.0.0.1}:${PROD_DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 40
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${APP_SLUG}_backend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles   # collectstatic cible
    ports:
      - "${PROD_API_BIND:-127.0.0.1}:${PROD_API_PORT:-8000}:8000"
    command:
      - bash
      - -lc
      - |
          python manage.py migrate --noinput &&
          python manage.py collectstatic --noinput &&
          gunicorn calendar_project.wsgi:application \
            --bind 0.0.0.0:8000 \
            --workers 3 \
            --access-logfile - \
            --error-logfile -
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  frontend:
    # Image Nginx qui sert le build Vite et reverse-proxy /api et /admin vers backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # utiles au build Vite si ton Dockerfile les propage
        VITE_API_BASE: ${VITE_API_BASE:-/api}
        VITE_ADMIN_URL: ${VITE_ADMIN_URL}
        APP_NAME: ${APP_NAME}
    container_name: ${APP_SLUG}_frontend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${PROD_FRONT_BIND:-0.0.0.0}:${PROD_FRONT_PORT:-80}:80"  # point d’entrée unique en prod
    volumes:
      - django_static:/static:ro         # sert /static/ (admin + assets Django)
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped

volumes:
  pgdata:
    name: ${APP_SLUG}_${APP_ENV}_pgdata
  django_static:
    name: ${APP_SLUG}_${APP_ENV}_static
