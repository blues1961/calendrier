name: cal_prod

services:
  db:
    image: postgres:16
    container_name: cal_db_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [appnet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build: { context: ./backend, dockerfile: Dockerfile }
    container_name: cal_backend_prod
    env_file: [ .env.prod, .env.prod.local ]
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    networks: [appnet, edge]
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.cal_api.rule=Host(`cal-api.mon-site.ca`)
      - traefik.http.routers.cal_api.entrypoints=web
      - traefik.http.services.cal_api.loadbalancer.server.port=8000
    command: >
      bash -lc "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn calendar_project.wsgi:application -b 0.0.0.0:8000 --workers 3
      "
    expose: ["8000"]

  frontend:
    build: { context: ./frontend, dockerfile: Dockerfile }
    container_name: cal_frontend_prod
    depends_on: [backend]
    networks: [edge]
    labels:
      - traefik.enable=true
      - traefik.docker.network=edge
      - traefik.http.routers.cal_front.rule=Host(`cal.mon-site.ca`)
      - traefik.http.routers.cal_front.entrypoints=web
      - traefik.http.services.cal_front.loadbalancer.server.port=80
    expose: ["80"]

networks:
  appnet: {}
  edge:
    external: true

volumes:
  pgdata: {}
