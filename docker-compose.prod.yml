version: "3.9"

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 40

  backend:
    # image: ghcr.io/blues1961/calendrier-backend:${IMAGE_TAG}
    build: ./backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: "0"
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: db
      DB_PORT: "5432"
      ALLOWED_HOSTS: cal-api.mon-site.ca
      CORS_ALLOWED_ORIGINS: https://cal.mon-site.ca
      CSRF_TRUSTED_ORIGINS: https://cal.mon-site.ca,https://cal-api.mon-site.ca
      SECURE_SSL_REDIRECT: "1"
      SESSION_COOKIE_SECURE: "1"
      CSRF_COOKIE_SECURE: "1"
      SECURE_HSTS_SECONDS: "31536000"
      SECURE_HSTS_INCLUDE_SUBDOMAINS: "1"
      SECURE_HSTS_PRELOAD: "1"
      ACCESS_TOKEN_LIFETIME_MIN: "60"
      REFRESH_TOKEN_LIFETIME_DAYS: "7"
    # Exposé seulement en loopback (Apache reverse proxy)
    ports:
      - "127.0.0.1:8002:8000"
    command: |
      bash -lc '
        echo "[boot] Attente DNS pour db...";
        for i in {1..30}; do
          python - << "PY"
          import os, socket, sys
          host = os.environ.get("DB_HOST", "db")
          try:
              socket.gethostbyname(host)
              print("[boot] DNS OK:", host)
              sys.exit(0)
          except Exception as e:
            print("[boot] DNS pas prêt:", e)
            sys.exit(1)
          PY
          if [ $? -eq 0 ]; then break; fi
          sleep 2
        done

        echo "[boot] Test connexion Postgres...";
        python - << "PY"
      import os, sys, time
      import psycopg
      host = os.environ.get("DB_HOST","db")
      port = int(os.environ.get("DB_PORT","5432"))
      user = os.environ.get("POSTGRES_USER")
      pwd  = os.environ.get("POSTGRES_PASSWORD")
      db   = os.environ.get("POSTGRES_DB")
      for i in range(30):
      try:
        with psycopg.connect(host=host, port=port, user=user, password=pwd, dbname=db, connect_timeout=3) as conn:
            print("[boot] Connexion Postgres OK")
            sys.exit(0)
      except Exception as e:
        print("[boot] Postgres pas prêt:", e)
        time.sleep(2)
        print("[boot] Abandon (DB indisponible).")
        sys.exit(1)
      PY

        echo "[boot] collectstatic + migrate + gunicorn";
        python manage.py collectstatic --noinput &&
        python manage.py migrate &&
        gunicorn calendar_project.wsgi:application --bind 0.0.0.0:8000 --workers 3
      '
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12

volumes:
  db_data_prod:
