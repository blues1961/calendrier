services:
  db:
    image: postgres:16
    container_name: ${APP_SLUG}_db_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    ports:
      # Accès local optionnel à la DB depuis l’hôte (OK, Traefik ne touche pas à la DB)
      - "${PROD_DB_BIND:-127.0.0.1}:${PROD_DB_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 40
    restart: unless-stopped
    networks:
      - appnet

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${APP_SLUG}_backend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - django_static:/app/staticfiles   # collectstatic cible
    # ⚠️ Pas d'exposition de ports en prod : Traefik route vers ce service
    command:
      - bash
      - -lc
      - |
          python manage.py migrate --noinput &&
          python manage.py collectstatic --noinput &&
          gunicorn calendar_project.wsgi:application \
            --bind 0.0.0.0:8000 \
            --workers 3 \
            --access-logfile - \
            --error-logfile -
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/api/health/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    labels:
      - traefik.enable=true
      # Route API/Admin directement au backend
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-api.rule=Host(`${APP_HOST}`) && (PathPrefix(`/api`) || PathPrefix(`/admin`))
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-api.entrypoints=websecure
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-api.tls=true
      - traefik.http.services.${APP_SLUG}-${APP_ENV}-api.loadbalancer.server.port=8000
      - traefik.docker.network=edge
    networks:
      - appnet
      - edge

  frontend:
    # Sert le build Vite via Nginx (statique). Traefik route par hostname.
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE:-/api}
        VITE_ADMIN_URL: ${VITE_ADMIN_URL}
        APP_NAME: ${APP_NAME}
    container_name: ${APP_SLUG}_frontend_${APP_ENV}
    env_file:
      - .env.prod
      - .env.prod.local
    depends_on:
      backend:
        condition: service_healthy
    # ⚠️ Pas d'exposition de ports en prod : Traefik route par host
    volumes:
      - django_static:/static:ro         # /static/ (admin + assets Django)
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/ >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    labels:
      - traefik.enable=true
      # Route le site (/) vers le frontend
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-front.rule=Host(`${APP_HOST}`)
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-front.entrypoints=websecure
      - traefik.http.routers.${APP_SLUG}-${APP_ENV}-front.tls=true
      - traefik.http.services.${APP_SLUG}-${APP_ENV}-front.loadbalancer.server.port=80
      - traefik.docker.network=edge
    networks:
      - appnet
      - edge

volumes:
  pgdata:
    name: ${APP_SLUG}_${APP_ENV}_pgdata
  django_static:
    name: ${APP_SLUG}_${APP_ENV}_static

networks:
  appnet:
    name: ${APP_SLUG}_${APP_ENV}_appnet
  edge:
    external: true
    name: edge
